{"version":3,"sources":["data.js","detail.js","App.js","serviceWorker.js","index.js"],"names":["gundam_data","id","title","img_src","product_content","price","Detail","props","useState","alret_value","alret_temp","useEffect","setTimeout","console","log","history","useHistory","page_id","useParams","excat_product","detail_data","find","className","src","width","onClick","push","goBack","Card_data","Card","Img","variant","img_p","Body","Title","title_p","Text","content_p","price_p","Button","More_data","title_n","content_n","price_n","App","product_data","button_status","button_status_temp","axios_data","axios_temp","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","to","NavDropdown","Item","Divider","exact","path","Jumbotron","map","temp","i","key","axios","get","then","success_result","data","catch","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d66490b1.chunk.js","sourcesContent":["//데이터 스토어이다. \n//하나의 상품을 구성하는 정보들을 어레이로 만들고 이 어레이 묶음들 3개를 오브젝트로 만들었다.\n//지금 이 코드 처럼 export 위에 변수 데이터를 만들지 않고 그냥 export default 뒤에 어레이 데이터를 만들어도 된다. \n//export default [{},{},{}]\n\n\nlet gundam_data = [\n  {\n    id : 0,\n    title : \"[MG] 1/100 백식 Ver.2.0\",\n    img_src : \"/p01.gif\",\n    product_content : \"기동 전사 Z건담 방송 30주년 기념!! MG백식이 Ver.2.0으로 탄생! MG gundam Mk-II Ver.2.0 으로 확립한 무버블 프레임을  기본으로 가동 기믹을 곳곳에 추가하여 인체에 가까운 가동력을 추구\",\n    price : 81600\n  },\n\n  {\n    id : 1,\n    title : \"Red Knit\",\n    img_src : \"/p02.gif\",\n    product_content : \"Born in Seoul\",\n    price : 110000\n  },\n\n  {\n    id : 2,\n    title : \"Grey Yordan\",\n    img_src : \"/p03.gif\",\n    product_content : \"Born in the States\",\n    price : 130000\n  }\n];\n\n\nexport default gundam_data","import React, {useState, useEffect } from 'react';\nimport {Button} from 'react-bootstrap';\nimport { useHistory, useParams } from 'react-router-dom';\nimport './Detail.scss';\n\nfunction Detail(props){\n    //useEffect Hook을 componentDidMount와 componentDidUpdate, componentWillUnmount가 합쳐진 것\n    //useEffect는 컴포넌트가 마운트 되었을 때. 컴포넌트가 업데이트 되었을 때에 특정 코드를 실행 시킬 수가 있다.\n    //아래의 예제 코드는 2초후에 경고창이 없어지게 하기 위해 state 사용 한 것\n    let [alret_value, alret_temp] = useState(true);\n    useEffect(() => {\n                    setTimeout( ()=>{ alret_temp(false)  }, 2000);\n                    console.log ('useEffect', alret_value)\n                    });\n\n    //useHistory () Hook의 하나로서 react-router-dom v5, react v 16.3이상에서만 사용이 가능하다.\n    //이동했던 방문 기록을 저장하는 오브젝트\n    //history.goback() , hostory.push(\"이동할 경로\")\n    let history = useHistory ();\n\n    //url 라우팅 시 만든 변수 값을 이용해서 접속하는 페이지별 상품 정보 다르게 하기 위한 것이다. \n    //useParams라는 훅을 사용한다.\n    //url 파라메터명으로 사용한 page_id에 들어가는 숫자를 (즉 url) 아래 props 어레이의 번지값으로 이용해서 타이틀이나 상세페이지 정보가 다른 것이 나타나도록 하는 것\n    let {page_id} = useParams ();\n    console.log (page_id);\n    //find() 어레이에서 원하는 자료를 검색 할 때에 사용하는 함수\n    let excat_product = props.detail_data.find(\n                                              function(detail_data){\n                                                return detail_data.id == page_id\n                                              });\n    console.log (excat_product);\n    \n    return (\n\n      <div className=\"container\">\n        <div className = 'detail_title'>\n          <h4> 상세정보 </h4>\n\n        </div>\n        \n        {\n         alret_value === true\n         ? <div className = 'my_alret'> <p>마감을 서두르세요</p> </div>\n         : null \n        }\n\n\n         <div className=\"row\">\n          <div className=\"col-md-6\">\n            <img src= {excat_product.img_src} width=\"100%\" />\n          </div>\n          <div className=\"col-md-6 mt-4\">\n            <h4 className=\"pt-5\">{excat_product.title}</h4>\n            <p>{excat_product.product_content}</p>\n            <p>{excat_product.price}원</p>\n            <button className=\"btn_red\" onClick = {() => {history.push(\"/\")}}>메인페이지</button> \n            <button className=\"btn_orange\" onClick = {() => {history.goBack();}}>이전페이지</button> \n          </div>\n        </div>\n\n\n    </div>  \n    )\n  }\n  \n  export default Detail ;\n\n\n","/* eslint-disable */\n\nimport React, { useState } from 'react';\nimport { Navbar, Nav, NavDropdown, Jumbotron, Button, Card, CardDeck, Modal} from 'react-bootstrap';\nimport {Link, Route, Switch} from 'react-router-dom';\nimport axios from 'axios';\n\nimport gundam_data from './data.js';\nimport Detail from './detail';\nimport './App.css';\n\nfunction App() {\n  let [product_data, data_update] = useState(gundam_data);\n  let [button_status, button_status_temp] = useState(false);\n  let [axios_data, axios_temp] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/\" className = \"nav_title\">기동전사 Z 건담</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n           <Nav className=\"mr-auto\">\n             <Nav.Link as={Link} to = \"/\">Home</Nav.Link>\n             <Nav.Link as = {Link} to = \"/detail\">Detail</Nav.Link>\n        \n             <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n               <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n               <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n               <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n               <NavDropdown.Divider />\n               <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n             </NavDropdown>\n        \n           </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      \n      <Route exact path= \"/\">\n\n      <Jumbotron className=\"jumbo_bg\">\n         <h1>그대는 시대의 눈물을 본다</h1>\n         <p>\n         君は、刻の涙を見る\n         </p>\n         <p>\n          <Button variant=\"primary\" onClick = {() => {}}>Learn more</Button>\n         </p>\n      </Jumbotron>  \n\n      <div className=\"container\">\n        <div className=\"row\">\n          { //오브젝트 호출하고 map 함수 이용해서 반복문 구조로 만들어 낸다. 반복문의 횟수는 map에서 불러오는 어레이 데이터 수 만큼 반복\n            //temp는 map이 돌면서 저장 되는 변수 currentValue, i는 반복 될 때마다 0부터 1씩 업데이트 되는 변수. index\n            //array.map(callbackFunction(currenValue, index, array), thisArg)\n            //반복 시킨 HTML에서는 key ={}가 꼭 필요하다.\n            product_data.map( function (temp, i) {\n                                              return <Card_data img_p = {product_data[i].img_src} title_p = {product_data[i].title} content_p = {product_data[i].product_content} price_p = {product_data[i].price} key={i}>\n\n                                                     </Card_data>\n                                              })\n\n            }\n        </div>\n        \n        <Button variant=\"primary\" onClick = {() => { \n                                                  axios.get('https://codingapple1.github.io/shop/data2.json')\n                                                  .then( (success_result) => { \n                                                                              //axios로 불러온 결과 처리 then(성공시 처리할 함수) catch(실패시 처리할 함수)\n                                                                              console.log ('정웅아 데이터 호출에 성공했다') ;\n                                                                              console.log(success_result);\n                                                                              console.log('불러온 데이터만 호출', success_result.data);\n                                                                              axios_temp([...success_result.data]);\n                                                                              button_status_temp (true);\n                                                                            })\n                                                  .catch( () => { \n                                                                 console.log ('정웅아 데이터 호출에 실패 했다') \n                                                                });\n                                                  \n\n                                                  }}>Load More product</Button> \n\n\n      </div>\n\n      \n      {\n         button_status === true\n         ? axios_data.map( function (temp, i) {\n                                              return <More_data title_n = {axios_data[i].title} content_n = {axios_data[i].content} price_n ={axios_data[i].price} key={i}>\n                                                    </More_data>\n                                              })\n         : null \n        }\n\n    </Route>\n\n    <Route path=\"/detail/:page_id\">\n      <Detail detail_data = {product_data} ></Detail>\n    </Route>\n   \n   <Route exact path = \"/:page_id\">\n     <div>url을 아무거나 입력 했을 때에 나타나는 페이지</div>\n   </Route>\n\n    </div> \n  )\n\n}\n\n\n//app()외부에 만들어야 하는 것 잊지 말 것.\n//컴포넌트의 이름을 대문자로 해야 하는 것과 이것을 불러와서 사용 할 때에 오브젝트 {<Card_data />} 형식으로 불러와야 하는 것 잊지 말 것. 혼자 만들 때에 계속 실수 함\nfunction Card_data(props ) {\n  return (\n    <div className=\"col-md-4\">\n    <Card>\n       <Card.Img variant=\"top\" src={props.img_p} width = \"100%\"/>\n       <Card.Body>\n          <Card.Title>{props.title_p}</Card.Title>\n          <Card.Text>\n          {props.content_p}\n          </Card.Text>\n          <Card.Text>\n          {props.price_p}원\n          </Card.Text>\n          <Button variant=\"primary\" onClick = {() => { }}>DETAIL</Button>\n       </Card.Body>\n    </Card>\n\n    \n   </div>\n      )\n}\n\n\nfunction More_data(props ) {\n  return (\n    <div className=\"row\">\n\n    <div className=\"col-md-4\">\n    <Card>\n       <Card.Body>\n          <Card.Title>{props.title_n}</Card.Title>\n          <Card.Text>\n           {props.content_n}\n          </Card.Text>\n          <Card.Text>\n          {props.price_n}원\n          </Card.Text>\n       </Card.Body>\n    </Card>\n\n    \n   </div>\n   </div>\n      )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n         <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}